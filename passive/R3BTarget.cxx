/* Generated by Together */

#include "FairGeoLoader.h"
#include "FairGeoInterface.h"
#include "FairGeoRootBuilder.h"
#include "FairRuntimeDb.h"
#include "TObjArray.h"
#include "FairRun.h"
#include "FairGeoVolume.h"
#include "FairGeoNode.h"

#include "R3BTarget.h"
#include "R3BGeoPassivePar.h"
#include "R3BGeoTarget.h"

// includes for modeling
#include "TGeoManager.h"
#include "TParticle.h"
#include "TVirtualMC.h"
#include "TGeoMatrix.h"
#include "TGeoMaterial.h"
#include "TGeoMedium.h"
#include "TGeoBBox.h"

R3BTarget::~R3BTarget()
{
}
R3BTarget::R3BTarget()
{
}

R3BTarget::R3BTarget(const char * name,  const char * title)
  : FairModule(name ,title)
{
}

void R3BTarget::ConstructGeometry(){
// test of out-of-file geometry definition

  Double_t dx, dy, dz;
  Double_t thx, thy, thz;
  Double_t phx, phy, phz;
  Double_t a, z, density, radl, absl;
  Double_t par[20];
  Int_t numed;

  TGeoMaterial *pMat=NULL;
  TGeoMedium   *pMed=NULL;

  // Material definition
  // Material: Lead
   a       = 207.190000;
   z       = 82.000000;
   density = 11.350000;
//   radl    = 0.561705;
//   absl    = 182.471644;
   pMat = new TGeoMaterial("Lead", a,z,density);
   pMat->SetIndex(600);
// Medium: Lead
   numed   = 26;  // medium number
   pMed  = new TGeoMedium("Lead", numed,pMat);

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;     phz = 0.000000;
   TGeoRotation *pRot = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans* pMatrix =
                   new TGeoCombiTrans("", dx,dy,dz,pRot);

 // Shape: LeadTarget type: TGeoBBox
   dx = 1.600000;
   dy = 1.200000;
   dz = 0.008810;
   TGeoShape *pLeadTarget = new TGeoBBox("LeadTarget", dx,dy,dz);
 // Volume: leadTarget_log
   TGeoVolume* pleadTarget_log
               = new TGeoVolume("leadTarget_log",pLeadTarget, pMed);
   pleadTarget_log->SetVisLeaves(kTRUE);

   TGeoVolume *top =  gGeoManager->GetTopVolume();
   top->AddNode(pleadTarget_log, 0, pMatrix);

}


/*
void R3BTarget::ConstructGeometry()
{
	FairGeoLoader *loader=FairGeoLoader::Instance();
	FairGeoInterface *GeoInterface =loader->getGeoInterface();
	R3BGeoTarget *MGeo=new R3BGeoTarget();
	MGeo->setGeomFile(GetGeometryFileName());
	GeoInterface->addGeoModule(MGeo);
	Bool_t rc = GeoInterface->readSet(MGeo);
	if ( rc ) MGeo->create(loader->getGeoBuilder());

        TList* volList = MGeo->getListOfVolumes();
        // store geo parameter
        FairRun *fRun = FairRun::Instance();
        FairRuntimeDb *rtdb= FairRun::Instance()->GetRuntimeDb();
        R3BGeoPassivePar* par=(R3BGeoPassivePar*)(rtdb->getContainer("R3BGeoPassivePar"));
        TObjArray *fSensNodes = par->GetGeoSensitiveNodes();
        TObjArray *fPassNodes = par->GetGeoPassiveNodes();

        TListIter iter(volList);
        FairGeoNode* node   = NULL;
        FairGeoVolume *aVol=NULL;

        while( (node = (FairGeoNode*)iter.Next()) ) {
            aVol = dynamic_cast<FairGeoVolume*> ( node );
            if ( node->isSensitive()  ) {
                fSensNodes->AddLast( aVol );
            }else{
                fPassNodes->AddLast( aVol );
            }
        }
	ProcessNodes( volList );
        par->setChanged();
        par->setInputVersion(fRun->GetRunId(),1);

}
*/

ClassImp(R3BTarget)



