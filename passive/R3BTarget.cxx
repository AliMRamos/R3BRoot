/* Generated by Together */

#include "FairGeoLoader.h"
#include "FairGeoInterface.h"
#include "FairGeoRootBuilder.h"
#include "FairRuntimeDb.h"
#include "TObjArray.h"
#include "FairRun.h"
#include "FairGeoVolume.h"
#include "FairGeoNode.h"

#include "R3BTarget.h"
#include "R3BGeoPassivePar.h"
#include "R3BGeoTarget.h"

// includes for modeling
#include "TGeoManager.h"
#include "TParticle.h"
#include "TVirtualMC.h"
#include "TGeoMatrix.h"
#include "TGeoMaterial.h"
#include "TGeoMedium.h"
#include "TGeoBBox.h"
#include "TGeoPara.h"
#include "TGeoTube.h"
#include "TGeoCone.h"
#include "TGeoBoolNode.h"

#include <iostream>

using namespace std;

R3BTarget::~R3BTarget()
{
if (fTargetName ) delete fTargetName;
}


R3BTarget::R3BTarget()
{
fTargetName=NULL;
}

R3BTarget::R3BTarget(const char * name,  const char * title)
  : R3BModule(name ,title)
{

fTargetName =  new TString(name);

}


void R3BTarget::ConstructGeometry(){

 if (*fTargetName == "LeadTarget") return  ConstructGeometry1();	//for s318
 if (*fTargetName == "Para")       return  ConstructGeometry2();
 if (*fTargetName == "Para45")     return  ConstructGeometry3();
 if (*fTargetName == "LiH")        return  ConstructGeometry4();
 if (*fTargetName == "CTarget")    return  ConstructGeometry5();	//for s318 
 if (*fTargetName == "CH2Target")    return  ConstructGeometry6(); 	//for s318
 if (*fTargetName == "ETTarget")    return  ConstructGeometry7(); 	//for s318, empty target

}



void R3BTarget::ConstructGeometry1(){

    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    //cout << "-I- R3BTarget Target type: Lead target (200mg/cm2) "<< endl;
    cout << "-I- R3BTarget Target type: Lead target (199mg/cm2) "<< endl;
    cout << endl;

  // test of out-of-file geometry definition

  Double_t dx, dy, dz;
  Double_t thx, thy, thz;
  Double_t phx, phy, phz;
  Double_t a, z, density;
  //Double_t par[20];
  Int_t numed;

  TGeoMaterial *pMat=NULL;
  TGeoMedium   *pMed=NULL;

  if (gGeoManager->GetMedium("Lead") ){
       cout << "-I- TGeoManager: Lead Medium already defined " << endl;
       pMed = gGeoManager->GetMedium("Lead");
   }else{
  // Material definition
  // Material: Lead
   a       = 207.190000;
   z       = 82.000000;
   density = 11.350000;
   pMat = new TGeoMaterial("Lead", a,z,density);
   pMat->SetIndex(600);
// Medium: Lead
   numed   = 26;  // medium number
   Double_t par[8];
   par[0]  = 0.000000; // isvol
   par[1]  = 0.000000; // ifield
   par[2]  = 0.000000; // fieldm
   par[3]  = 0.000000; // tmaxfd
   par[4]  = 0.000000; // stemax
   par[5]  = 0.000000; // deemax
   par[6]  = 0.000100; // epsil
   par[7]  = 0.000000; // stmin
   pMed  = new TGeoMedium("Lead", numed,pMat, par);
  }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;       //-(0.15+half thickness)
   //dx = -0.202437;	//s318: including offsets from exp tracker
   //dy = -0.0776977;	//s318: including offsets from exp tracker
   //dz = -0.15;		//s318: -(0.15cm)
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;     phz = 0.000000;
   TGeoRotation *pRot = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans* pMatrix =
                   new TGeoCombiTrans("", dx,dy,dz,pRot);

 // Shape: LeadTarget type: TGeoBBox
   //dx = 1.600000;
   //dy = 1.200000;
   //dz = 0.008810;
   dx = 1.500000;	//s318
   dy = 1.500000;	//s318
   //dz = 0.0176;		//s318
   dz = 0.008766520;		//s318: 199mg/cm2 = 0.17533040mm
   TGeoShape *pLeadTarget = new TGeoBBox("LeadTarget", dx,dy,dz);
 // Volume: leadTarget_log
   TGeoVolume* pleadTarget_log
               = new TGeoVolume("leadTarget_log",pLeadTarget, pMed);
   pleadTarget_log->SetVisLeaves(kTRUE);

   TGeoVolume *top =  gGeoManager->GetTopVolume();

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix);
   top->AddNode(pleadTarget_log, 0, pGlobal);

}

void R3BTarget::ConstructGeometry2(){

    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type: Parafine @ 0 deg  "<< endl;
    cout << endl;

   Double_t dx,dy,dz;
   Double_t a;
   Double_t thx, phx, thy, phy, thz, phz;
   Double_t  phi1, phi2;
   Double_t z, density, w;
   Int_t nel, numed;

   // MATERIALS, MIXTURES AND TRACKING MEDIA

   TGeoMedium * pMed2=NULL;
   if (gGeoManager->GetMedium("Air") ){
       pMed2=gGeoManager->GetMedium("Air");
   }else{
       // Mixture: Air
       nel     = 2;
       density = 0.001290;
       TGeoMixture*
	   pMat2 = new TGeoMixture("Air", nel,density);
       a = 14.006740;   z = 7.000000;   w = 0.700000;  // N
       pMat2->DefineElement(0,a,z,w);
       a = 15.999400;   z = 8.000000;   w = 0.300000;  // O
       pMat2->DefineElement(1,a,z,w);
       pMat2->SetIndex(1);
       numed = 14;
       Double_t par[8];
       par[0]  = 0.000000; // isvol
       par[1]  = 0.000000; // ifield
       par[2]  = 0.000000; // fieldm
       par[3]  = 0.000000; // tmaxfd
       par[4]  = 0.000000; // stemax
       par[5]  = 0.000000; // deemax
       par[6]  = 0.000100; // epsil
       par[7]  = 0.000000; // stmin
       pMed2 = new TGeoMedium("Air", numed,pMat2,par);
   }

// Mixture: CH2
   TGeoMedium * pMed16=NULL;
   if (gGeoManager->GetMedium("CH2") ){
       cout << "-I- TGeoManager: CH2 Medium already defined " << endl;
       pMed16=gGeoManager->GetMedium("CH2");
   }else{
     nel = 2;
     density = 0.930000;
     TGeoMixture*
	 pMat16 = new TGeoMixture("CH2", nel,density);
     a = 12.010700;   z = 6.000000;   w = 0.856281;  // C
     pMat16->DefineElement(0,a,z,w);
     a = 1.007940;   z = 1.000000;   w = 0.143719;  // H
     pMat16->DefineElement(1,a,z,w);
     pMat16->SetIndex(15);
     // Medium: CH2
     numed   = 15;  // medium number
     Double_t par[8];
      par[0]  = 0.000000; // isvol
      par[1]  = 0.000000; // ifield
      par[2]  = 0.000000; // fieldm
      par[3]  = 0.000000; // tmaxfd
      par[4]  = 0.000000; // stemax
      par[5]  = 0.000000; // deemax
      par[6]  = 0.000100; // epsil
      par[7]  = 0.000000; // stmin
     pMed16 = new TGeoMedium("CH2", numed,pMat16, par);
   }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix3 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix2 = new TGeoCombiTrans("", dx,dy,dz,pMatrix3);

   TGeoVolume *top =  gGeoManager->GetTopVolume();

   // SHAPES, VOLUMES AND GEOMETRICAL HIERARCHY
   // Shape: Parafin0deg type: TGeoTubeSeg
   Double_t rmin = 0.000000;
   Double_t rmax = 1.000000;
   dz   = 0.005500;
   phi1 = 0.000000;
   phi2 = 360.000000;
   TGeoShape *pParafin0deg = new TGeoTubeSeg("Parafin0deg",rmin,rmax,dz,phi1,phi2);
   // Volume: Parafin0deg
   TGeoVolume*
   pParafin0deg_log = new TGeoVolume("Parafin0deg",pParafin0deg, pMed16);
   pParafin0deg_log->SetVisLeaves(kTRUE);

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix2);
   top->AddNode(pParafin0deg_log, 0, pGlobal);

}

void R3BTarget::ConstructGeometry3(){
    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type; Parafine @ 45 deg "<< endl;
    cout << endl;


   Double_t dx,dy,dz;
   Double_t theta, phi;
   Double_t a;
   Double_t thx, phx, thy, phy, thz, phz;
   Double_t alpha;
   Double_t z, density, w;
   Int_t nel, numed;

   // MATERIALS, MIXTURES AND TRACKING MEDIA

   // Mixture: Air
   TGeoMedium * pMed2=NULL;
   if (gGeoManager->GetMedium("Air") ){
       pMed2=gGeoManager->GetMedium("Air");
   }else{
     nel     = 2;
     density = 0.001290;
     TGeoMixture*
	 pMat2 = new TGeoMixture("Air", nel,density);
     a = 14.006740;   z = 7.000000;   w = 0.700000;  // N
     pMat2->DefineElement(0,a,z,w);
     a = 15.999400;   z = 8.000000;   w = 0.300000;  // O
     pMat2->DefineElement(1,a,z,w);
     pMat2->SetIndex(1);
     // Medium: Air
     numed   = 1;  // medium number
     Double_t par[8];
     par[0]  = 0.000000; // isvol
     par[1]  = 0.000000; // ifield
     par[2]  = 0.000000; // fieldm
     par[3]  = 0.000000; // tmaxfd
     par[4]  = 0.000000; // stemax
     par[5]  = 0.000000; // deemax
     par[6]  = 0.000100; // epsil
     par[7]  = 0.000000; // stmin
     pMed2 = new TGeoMedium("Air", numed,pMat2, par);
   }

   // Mixture: CH2
   TGeoMedium * pMed16=NULL;
   if (gGeoManager->GetMedium("CH2") ){
       pMed16=gGeoManager->GetMedium("CH2");
   }else{
    nel     = 2;
    density = 0.930000;
    TGeoMixture*
	pMat16 = new TGeoMixture("CH2", nel,density);
    a = 12.010700;   z = 6.000000;   w = 0.856281;  // C
    pMat16->DefineElement(0,a,z,w);
    a = 1.007940;   z = 1.000000;   w = 0.143719;  // H
    pMat16->DefineElement(1,a,z,w);
    pMat16->SetIndex(15);
    // Medium: CH2
    numed   = 15;  // medium number
    Double_t par[8];
    par[0]  = 0.000000; // isvol
    par[1]  = 0.000000; // ifield
    par[2]  = 0.000000; // fieldm
    par[3]  = 0.000000; // tmaxfd
    par[4]  = 0.000000; // stemax
    par[5]  = 0.000000; // deemax
    par[6]  = 0.000100; // epsil
    par[7]  = 0.000000; // stmin
    pMed16 = new TGeoMedium("CH2", numed,pMat16, par);
   }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;
   // Rotation: 
   thx = 135.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 45.000000;    phz = 0.000000;
   TGeoRotation *pMatrix3 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix2 = new TGeoCombiTrans("", dx,dy,dz,pMatrix3);


   TGeoVolume *top =  gGeoManager->GetTopVolume();


   // SHAPES, VOLUMES AND GEOMETRICAL HIERARCHY
   // Shape: Para45deg type: TGeoPara
   dx    = 1.450000;
   dy    = 1.000000;
   dz    = 0.005500;
   alpha = 0.000000;
   theta = 45.000000;
   phi   = -180.000000;
   TGeoShape *pPara45deg = new TGeoPara("Para45deg",dx,dy,dz,alpha,theta,phi);
   // Volume: Para45deg
   TGeoVolume*
   pPara45deg_log = new TGeoVolume("Para45deg",pPara45deg, pMed16);
   pPara45deg_log->SetVisLeaves(kTRUE);

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix2);

   top->AddNode(pPara45deg_log, 0, pGlobal);

}



void R3BTarget::ConstructGeometry4(){

    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type: LiH "<< endl;
    cout << endl;


   Double_t dx,dy,dz;
   Double_t a;
   Double_t thx, phx, thy, phy, thz, phz;
   Double_t  phi1, phi2;
   Double_t z, density, radl, absl, w;
   Int_t nel, numed;

   // MATERIALS, MIXTURES AND TRACKING MEDIA

   // Mixture: Air
   TGeoMedium * pMed2=NULL;
   if (gGeoManager->GetMedium("Air") ){
       pMed2=gGeoManager->GetMedium("Air");
   }else{
    nel     = 2;
    density = 0.001290;
    TGeoMixture*
	pMat2 = new TGeoMixture("Air", nel,density);
    a = 14.006740;   z = 7.000000;   w = 0.700000;  // N
    pMat2->DefineElement(0,a,z,w);
    a = 15.999400;   z = 8.000000;   w = 0.300000;  // O
    pMat2->DefineElement(1,a,z,w);
    pMat2->SetIndex(1);
    // Medium: Air
    numed   = 1;  // medium number
    Double_t par[8];
    par[0]  = 0.000000; // isvol
    par[1]  = 0.000000; // ifield
    par[2]  = 0.000000; // fieldm
    par[3]  = 0.000000; // tmaxfd
    par[4]  = 0.000000; // stemax
    par[5]  = 0.000000; // deemax
    par[6]  = 0.000100; // epsil
    par[7]  = 0.000000; // stmin
    pMed2 = new TGeoMedium("Air", numed,pMat2, par);
   }

// Mixture: Mylar
   TGeoMedium * pMed15=NULL;
   if (gGeoManager->GetMedium("Mylar") ){
       pMed15=gGeoManager->GetMedium("Mylar");
   }else{
    nel     = 3;
    density = 1.397000;
    TGeoMixture*
	pMat15 = new TGeoMixture("Mylar", nel,density);
    a = 12.010700;   z = 6.000000;   w = 0.625010;  // C
    pMat15->DefineElement(0,a,z,w);
    a = 1.007940;   z = 1.000000;   w = 0.041961;  // H
    pMat15->DefineElement(1,a,z,w);
    a = 15.999400;   z = 8.000000;   w = 0.333029;  // O
    pMat15->DefineElement(2,a,z,w);
    pMat15->SetIndex(14);
    // Medium: Mylar
    numed   = 14;  // medium number
    Double_t par[8];
    par[0]  = 0.000000; // isvol
    par[1]  = 0.000000; // ifield
    par[2]  = 0.000000; // fieldm
    par[3]  = 0.000000; // tmaxfd
    par[4]  = 0.000000; // stemax
    par[5]  = 0.000000; // deemax
    par[6]  = 0.000100; // epsil
    par[7]  = 0.000000; // stmin
    pMed15 = new TGeoMedium("Mylar", numed,pMat15,par);
   }

    // Material: H2
   TGeoMedium * pMed3=NULL;
   if (gGeoManager->GetMedium("H2") ){
       pMed3=gGeoManager->GetMedium("H2");
   }else{
      a       = 1.007940;
      z       = 1.000000;
      density = 0.070800;
      radl    = 816.908193;
      absl    = 4956.556132;
      TGeoMaterial*
	  pMat3 = new TGeoMaterial("H2", a,z,density,radl,absl);
      pMat3->SetIndex(2);
      // Medium: H2
      numed   = 2;  // medium number
      Double_t par[8];
      par[0]  = 0.000000; // isvol
      par[1]  = 0.000000; // ifield
      par[2]  = 0.000000; // fieldm
      par[3]  = 0.000000; // tmaxfd
      par[4]  = 0.000000; // stemax
      par[5]  = 0.000000; // deemax
      par[6]  = 0.000100; // epsil
      par[7]  = 0.000000; // stmin
      pMed3 = new TGeoMedium("H2", numed,pMat3,par);
   }


// Specific Material definition
 // --  Material: Gold
   TGeoMedium * pMedAu=NULL;
   if (gGeoManager->GetMedium("Gold") ){
       pMedAu=gGeoManager->GetMedium("Gold");
   }else{
    w       =        0.;
    a       = 196.9685;
    z       = 79.000000;
    density = 19.3000000;
    //radl    = 6.9;  
    //absl    = ?;
    TGeoMaterial*
      pMatAu = new TGeoMaterial("Gold", a,z,density) ; //,radl,absl);
    pMatAu->SetIndex(702);
    numed   = 103;  // medium number
    Double_t par[8];
    par[0]  = 0.000000; // isvol
    par[1]  = 0.000000; // ifield
    par[2]  = 0.000000; // fieldm
    par[3]  = 0.000000; // tmaxfd
    par[4]  = 0.000000; // stemax
    par[5]  = 0.000000; // deemax
    par[6]  = 0.000100; // epsil
    par[7]  = 0.000000; // stmin
    pMedAu = new TGeoMedium("Gold", numed,pMatAu, par);
   }



     // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 3.025000;  // tanslation along z
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix3 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix2 = new TGeoCombiTrans("", dx,dy,dz,pMatrix3);
   dz=dz*2.+5.5;
   TGeoCombiTrans*
   pMatrix2b = new TGeoCombiTrans("", dx,dy,dz,pMatrix3);
   dz=dz +5.5 + 1.02500;
   TGeoCombiTrans*
   pMatrix2c = new TGeoCombiTrans("", dx,dy,dz,pMatrix3);

   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000; //1.765000;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix5 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix4 = new TGeoCombiTrans("", dx,dy,dz,pMatrix5);

   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000; //0.007500;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix7 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix6 = new TGeoCombiTrans("", dx,dy,dz,pMatrix7);

   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   //dz = 4.007500;  // 0.007500;
   //dz = 4.012500;  // 0.007500;
   dz = 3.012500;  // 0.007500;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix9 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix8 = new TGeoCombiTrans("", dx,dy,dz,pMatrix9);

   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   //dz = -4.007500;  // 3.522500;
   //dz = -4.012500;  // 3.522500;
   dz = -3.012500;  // 3.522500;
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix11 = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix10 = new TGeoCombiTrans("", dx,dy,dz,pMatrix11);

   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   //dz = 6.30000; // tube  
   //dz = 7.0000;// cone   
   dz = 8.4500;// cone  for final specs 
  // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;    phz = 0.000000;
   TGeoRotation *pMatrix13 = new TGeoRotation("", thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans*
   pMatrix12 = new TGeoCombiTrans("", dx,dy,dz,pMatrix13);


   TGeoVolume *top =  gGeoManager->GetTopVolume();

     

   // SHAPES, VOLUMES AND GEOMETRICAL HIERARCHY

   // Shape: TargetEnveloppe type: TGeoTubeSeg
   // TargetEnveloppe Tube 1
   //
   Double_t rmin = 0.000000;
   Double_t rmax = 3.525000;  
   //dz   = 4.0250; //7.045000;
   dz   = 3.0250; /// = half length 
   phi1 = 0.000000;
   phi2 = 360.000000;
   TGeoShape *pTargetEnveloppe = new TGeoTubeSeg("TargetEnveloppe",rmin,rmax,dz,phi1,phi2);
   // Volume: TargetEnveloppe Tube
   TGeoVolume*
   pTargetEnveloppe_log = new TGeoVolume("TargetEnveloppe",pTargetEnveloppe, pMed2);
   pTargetEnveloppe_log->SetVisLeaves(kTRUE);
   // Position Mother Volume
   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix2);
   top->AddNode(pTargetEnveloppe_log, 0, pGlobal);

   /*
   // Shape: TargetEnveloppe type: TGeoCone
   // TargetEnveloppe Cone
   //
   Double_t rmin2 = 0.000000;
   Double_t rmax2 = 1.500000;  
   dz = 5.50; 
   TGeoShape *pTargetEnveloppeCone = new TGeoCone("TargetEnveloppeCone",dz,rmin,rmax,rmin2,rmax2);
   // Volume: TargetEnveloppe Cone
   TGeoVolume*
   pTargetEnveloppeCone_log = new TGeoVolume("TargetEnveloppeCone",pTargetEnveloppeCone, pMed2);
   pTargetEnveloppeCone_log->SetVisLeaves(kTRUE);
   // Position Mother Volume
   top->AddNode(pTargetEnveloppeCone_log, 0, pMatrix2b);

   // Shape: TargetEnveloppe type: TGeoTubeSeg
   // TargetEnveloppe Tube 2
   //
   dz   = 1.0250; 
   TGeoShape *pTargetEnveloppe2 = new TGeoTubeSeg("TargetEnveloppe2",rmin2,rmax2,dz,phi1,phi2);
   // Volume: TargetEnveloppe Tube 2
   TGeoVolume*
   pTargetEnveloppe2_log = new TGeoVolume("TargetEnveloppe2",pTargetEnveloppe2, pMed2);
   pTargetEnveloppe2_log->SetVisLeaves(kTRUE);
   // Position Mother Volume
   top->AddNode(pTargetEnveloppe2_log, 0, pMatrix2c);
   */
  
   // Shape: Target1 type: TGeoTubeSeg
   // Mylar Tube
   rmin = 3.5;          //1.000000;
   rmax = 3.5250;       //for Mylar
   //rmax = 3.5100;       //for Gold
   dz   = 3.;           //1.750000;
   phi1 = 0.000000;
   phi2 = 360.000000;
   TGeoShape *pTarget1 = new TGeoTubeSeg("Target1",rmin,rmax,dz,phi1,phi2);
   // Volume: Target1
   TGeoVolume*
     pTarget1_log = new TGeoVolume("Target1",pTarget1, pMed15);   // Mylar
   pTarget1_log->SetVisLeaves(kTRUE);
   pTargetEnveloppe_log->AddNode(pTarget1_log, 0, pMatrix4);

   /*
   // Shape: Target1 type: TGeoCone
   // Mylar Cone
   //
   rmin2 = 1.475000;
   dz=5.50;
   TGeoShape *pTarget1Cone = new TGeoCone("Target1Cone",dz,rmin,rmax,rmin2,rmax2);
   // Volume: Target1 Cone
   TGeoVolume*
   pTarget1Cone_log = new TGeoVolume("Target1Cone",pTarget1Cone, pMed2);
   pTarget1Cone_log->SetVisLeaves(kTRUE);
   // Position Mother Volume
   pTargetEnveloppeCone_log->AddNode(pTarget1Cone_log, 0, pMatrix4);
 
   // Shape: Target1 type: TGeoTube
   // Mylar Tube 2
   //
   dz = 1.0250;
     TGeoShape *pTarget1Tub2 = new TGeoTubeSeg("Target1Tub2",rmin2,rmax2,dz,phi1,phi2);
   // Volume: Target1Tub2
   TGeoVolume*
     pTarget1Tub2_log = new TGeoVolume("Target1Tub2",pTarget1Tub2, pMed15);   // Mylar
   pTarget1Tub2_log->SetVisLeaves(kTRUE);
   pTargetEnveloppe2_log->AddNode(pTarget1Tub2_log, 0, pMatrix4);
   */
   
   // Shape: Target2 type: TGeoTubeSeg
   // H2 Tube 1
   //
   rmin = 0.000000;
   rmax = 3.5;           //1.000000;
   //dz   = 4.;            //1.750000;
   dz   = 3.;            //1.750000;
   phi1 = 0.000000;
   phi2 = 360.000000;
   TGeoShape *pTarget2 = new TGeoTubeSeg("Target2",rmin,rmax,dz,phi1,phi2);
   // Volume: Target2
   TGeoVolume*
     pTarget2_log = new TGeoVolume("Target2",pTarget2, pMed3);   // H2
   pTarget2_log->SetVisLeaves(kTRUE);
   pTargetEnveloppe_log->AddNode(pTarget2_log, 0, pMatrix6);

   /*
   // Shape: Target2 type: TGeoCone
   // H2 Cone
   //
   rmin2 = 0.;
   rmax2 = 1.475000;
   dz=5.50;
   TGeoShape *pTarget2Cone = new TGeoCone("Target2Cone",dz,rmin,rmax,rmin2,rmax2);
   // Volume: Target2 Cone
   TGeoVolume*
     pTarget2Cone_log = new TGeoVolume("Target2Cone",pTarget2Cone, pMed3);  // H2
   pTarget2Cone_log->SetVisLeaves(kTRUE);
   // Position Mother Volume
   pTargetEnveloppeCone_log->AddNode(pTarget2Cone_log, 0, pMatrix4);
 
   // Shape: Target2 type: TGeoTube
   // H2 Tube 2
   //
   dz=1.0250;
   TGeoShape *pTarget2Tub2 = new TGeoTubeSeg("Target2Tub2",rmin2,rmax2,dz,phi1,phi2);
   // Volume: Target2Tub2
   TGeoVolume*
     pTarget2Tub2_log = new TGeoVolume("Target2Tub2",pTarget2Tub2, pMed3);   // H2
   pTarget2Tub2_log->SetVisLeaves(kTRUE);
   pTargetEnveloppe2_log->AddNode(pTarget2Tub2_log, 0, pMatrix6);
   */

   // Shape: Target3 type: TGeoTubeSeg
   rmin = 0.000000;
   rmax = 3.5250;    //for mylar;
   //rmax = 3.5100;    //for Gold;
   //rmax = 3.5150;    //1.015000;
   dz   = 0.012500;  // =half thickness for Mylar
   //dz   = 0.00500;  // =half thickness for Gold
   //dz   = 0.00100;  // =half thickness for Carbon
   //dz   = 0.007500; // -half thickness
   phi1 = 0.000000;
   phi2 = 360.000000;
   TGeoShape *pTarget3 = new TGeoTubeSeg("Target3",rmin,rmax,dz,phi1,phi2);

   // Volume: Target3
   TGeoVolume* 
     //pTarget3_log = new TGeoVolume("Target3",pTarget3, pMedCarb);    // Carb
     //pTarget3_log = new TGeoVolume("Target3",pTarget3, pMedAu);    // Gold
     pTarget3_log = new TGeoVolume("Target3",pTarget3, pMed15);    // Mylar
   pTarget3_log->SetVisLeaves(kTRUE);
   pTargetEnveloppe_log->AddNode(pTarget3_log, 0, pMatrix8);
   pTargetEnveloppe_log->AddNode(pTarget3_log, 1, pMatrix10);



   // Shape: Target4 type: TGeoTubeSeg
   //rmin = 0.000000; // Tube
   //rmax = 3.5000;   // Tube
   rmin = 6.637;   // Cone
   rmax = 6.647;   // Cone   0.1mm
   Double_t
   //rmin2 = 1.2;     // Cone
   rmin2 = 1.6;     // Cone
   Double_t
     //rmax2 = 1.7;    // Cone  1mm 
   rmax2 = 1.61;    // Cone  0.1mm
   //dz   = 0.00500;  // Tube =half length
   //dz   = 9.500000;   // Cone =half length
   dz   = 10.60000;   // Cone =half length for final specs
   phi1 = 0.000000;
   phi2 = 360.000000;
   //TGeoShape *pTarget4 = new TGeoTubeSeg("Target4",rmin,rmax,dz,phi1,phi2);
   TGeoShape *pTarget4 = new TGeoCone("Target4",dz,rmin,rmax,rmin2,rmax2);

   // Volume: Target4
   TGeoVolume*
     pTarget4_log = new TGeoVolume("Target4",pTarget4, pMedAu);    // Gold
     //pTarget4_log = new TGeoVolume("Target4",pTarget4, pMed15);    // Mylar
   pTarget4_log->SetVisLeaves(kTRUE);
   //top->AddNode(pTarget4_log, 0, pMatrix12);



}

void R3BTarget::ConstructGeometry5(){

    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type: Carbon target (2.01 mm) "<< endl;
    cout << endl;

  // test of out-of-file geometry definition

  Double_t dx, dy, dz;
  Double_t thx, thy, thz;
  Double_t phx, phy, phz;
  Double_t a, z, density;
  //Double_t par[20];
  Int_t numed;

  TGeoMaterial *pMat=NULL;
  TGeoMedium   *pMed=NULL;

  if (gGeoManager->GetMedium("Carbon") ){
       cout << "-I- TGeoManager: Carbon Medium already defined " << endl;
       pMed = gGeoManager->GetMedium("Carbon");
   }else{
  // Material definition
  // Material: Carbon
   a       = 12.011000;
   z       = 6.000000;
   //density = 2.260000;
   density = 1.840000;	//s318: g/ccm
   pMat = new TGeoMaterial("Carbon", a,z,density);
   pMat->SetIndex(12);
// Medium: Carbon
   numed   = 12;  // medium number
   Double_t par[8];
   par[0]  = 0.000000; // isvol
   par[1]  = 0.000000; // ifield
   par[2]  = 0.000000; // fieldm
   par[3]  = 0.000000; // tmaxfd
   par[4]  = 0.000000; // stemax
   par[5]  = 0.000000; // deemax
   par[6]  = 0.000100; // epsil
   par[7]  = 0.000000; // stmin
   pMed  = new TGeoMedium("Carbon", numed,pMat, par);
  }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;	//-(0.15cm+half thickness)
   //dx = -0.202437;	//s318: including offsets from exp tracker
   //dy = -0.0776977;	//s318: including offsets from exp tracker
   //dz = -0.15;		//s318: (0.15cm)
   //dz = 0.00;		//justyna
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;     phz = 0.000000;
   TGeoRotation *pRot = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans* pMatrix =
                   new TGeoCombiTrans("", dx,dy,dz,pRot);

 // Shape: CarbonTarget type: TGeoBBox
   //dx = 1.600000;
   //dy = 1.200000;
   //dz = 0.008810;
   dx = 1.500000;	//s318
   dy = 1.500000;	//s318
   //dz = 0.201;		//s318
   dz = 0.1005;		//s318 half length?!?
   TGeoShape *pCarbonTarget = new TGeoBBox("CarbonTarget", dx,dy,dz);
 // Volume: CarbonTarget_log
   TGeoVolume* pCarbonTarget_log
               = new TGeoVolume("CarbonTarget_log",pCarbonTarget, pMed);
   pCarbonTarget_log->SetVisLeaves(kTRUE);

   TGeoVolume *top =  gGeoManager->GetTopVolume();

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix);
   top->AddNode(pCarbonTarget_log, 0, pGlobal);

}
// new CH2 target for s318?
void R3BTarget::ConstructGeometry6(){

    cout << endl;
    cout << "-I- R3BTarget::ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type: CH2 target (2.31 mm) "<< endl;
    cout << endl;

  // test of out-of-file geometry definition

  Double_t dx, dy, dz;
  Double_t thx, thy, thz;
  Double_t phx, phy, phz;
  Double_t a, z, density, w;
  Int_t nel, numed;

  // Mixture: CH2
   TGeoMedium * pMed16=NULL;
   if (gGeoManager->GetMedium("CH2") ){
       cout << "-I- TGeoManager: CH2 Medium already defined " << endl;
       pMed16=gGeoManager->GetMedium("CH2");
   }else{
     nel = 2;
     //density = 0.930000;
     density = 0.920000;	//s318
     TGeoMixture*
	 pMat16 = new TGeoMixture("CH2", nel,density);
     a = 12.010700;   z = 6.000000;   w = 0.856281;  // C
     pMat16->DefineElement(0,a,z,w);
     a = 1.007940;   z = 1.000000;   w = 0.143719;  // H
     pMat16->DefineElement(1,a,z,w);
     pMat16->SetIndex(15);
     // Medium: CH2
     numed   = 15;  // medium number
     Double_t par[8];
      par[0]  = 0.000000; // isvol
      par[1]  = 0.000000; // ifield
      par[2]  = 0.000000; // fieldm
      par[3]  = 0.000000; // tmaxfd
      par[4]  = 0.000000; // stemax
      par[5]  = 0.000000; // deemax
      par[6]  = 0.000100; // epsil
      par[7]  = 0.000000; // stmin
     pMed16 = new TGeoMedium("CH2", numed,pMat16, par);
   }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;       //-(0.15cm+half thickness)
   //dx = -0.202437;	//s318: including offsets from exp tracker
   //dy = -0.0776977;	//s318: including offsets from exp tracker
   //dz = -0.15;		//s318: (0.15cm)
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;     phz = 0.000000;
   TGeoRotation *pRot = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans* pMatrix =
                   new TGeoCombiTrans("", dx,dy,dz,pRot);

 // Shape: CH2Target type: TGeoBBox
   //dx = 1.600000;
   //dy = 1.200000;
   //dz = 0.008810;
   dx = 1.500000;	//s318
   dy = 1.500000;	//s318
   //dz = 0.231;		//s318
   dz = 0.1155;		//s318
   TGeoShape *pCH2Target = new TGeoBBox("CH2Target", dx,dy,dz);
 // Volume: CH2Target_log
   TGeoVolume* pCH2Target_log
               = new TGeoVolume("CH2Target_log",pCH2Target, pMed16);
   pCH2Target_log->SetVisLeaves(kTRUE);

   TGeoVolume *top =  gGeoManager->GetTopVolume();

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix);
   top->AddNode(pCH2Target_log, 0, pGlobal);

}

void R3BTarget::ConstructGeometry7(){//ETTarget

    cout << endl;
    cout << "-I- R3BTarget:: ConstructGeometry() "<< endl;
    cout << "-I- R3BTarget Target type: Empty target (vacuum) "<< endl;
    cout << endl;

  // test of out-of-file geometry definition

  Double_t dx, dy, dz;
  Double_t thx, thy, thz;
  Double_t phx, phy, phz;
  Double_t a, z, density;
  //Double_t par[20];
  Int_t numed;

  TGeoMaterial *pMat=NULL;
  TGeoMedium   *pMed=NULL;

  if (gGeoManager->GetMedium("Vacuum") ){
       cout << "-I- TGeoManager: Vacuum Medium already defined " << endl;
       pMed = gGeoManager->GetMedium("Vacuum");
   }else{
  // Material definition
  // Material: Vacuum
   a       = 1.e-16;
   z       = 1.e-16;
   density = 1.e-16;
   pMat = new TGeoMaterial("Vacuum", a,z,density);
   pMat->SetIndex(2);
// Medium: Vacuum
   numed   = 2;  // medium number
   Double_t par[8];
   par[0]  = 0.000000; // isvol
   par[1]  = 0.000000; // ifield
   par[2]  = 0.000000; // fieldm
   par[3]  = 0.000000; // tmaxfd
   par[4]  = 0.000000; // stemax
   par[5]  = 0.000000; // deemax
   par[6]  = 0.000100; // epsil
   par[7]  = 0.000000; // stmin
   pMed  = new TGeoMedium("Vacuum", numed,pMat, par);
  }

   // TRANSFORMATION MATRICES
   // Combi transformation: 
   dx = 0.000000;
   dy = 0.000000;
   dz = 0.000000;	//-(0.15cm+half thickness)
   //dx = -0.202437;	//s318: including offsets from exp tracker
   //dy = -0.0776977;	//s318: including offsets from exp tracker
   //dz = -0.15;		//s318: (0.15cm)
   //dz = 0.00;		//justyna
   // Rotation: 
   thx = 90.000000;    phx = 0.000000;
   thy = 90.000000;    phy = 90.000000;
   thz = 0.000000;     phz = 0.000000;
   TGeoRotation *pRot = new TGeoRotation("",thx,phx,thy,phy,thz,phz);
   TGeoCombiTrans* pMatrix =
                   new TGeoCombiTrans("", dx,dy,dz,pRot);

 // Shape: VacuumTarget type: TGeoBBox
   //dx = 1.600000;
   //dy = 1.200000;
   //dz = 0.008810;
   dx = 1.500000;	//s318
   dy = 1.500000;	//s318
   //dz = 0.201;		//s318
   dz = 0.1000;		//arbitrary thickness, 2mm for convenience
   TGeoShape *pVacuumTarget = new TGeoBBox("VacuumTarget", dx,dy,dz);
 // Volume: VacuumTarget_log
   TGeoVolume* pVacuumTarget_log
               = new TGeoVolume("VacuumTarget_log",pVacuumTarget, pMed);
   pVacuumTarget_log->SetVisLeaves(kTRUE);

   TGeoVolume *top =  gGeoManager->GetTopVolume();

   TGeoCombiTrans* pGlobal = GetGlobalPosition(pMatrix);
   top->AddNode(pVacuumTarget_log, 0, pGlobal);

}

ClassImp(R3BTarget)



